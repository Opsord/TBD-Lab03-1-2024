name: OWASP ZAP Baseline Scan

on:
  push:
    branches:
      - DevSecOps---David
  pull_request:
    branches:
      - DevSecOps---David
jobs:
  zap_scan:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: LabTBD-1-2024
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d LabTBD-1-2024"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'

    - name: Update npm
      working-directory: Frontend
      run: npm install -g npm@latest

    - name: Install frontend dependencies
      working-directory: Frontend
      run: npm install

    - name: Build front
      working-directory: Frontend
      run: npm run build

    - name: run preview
      working-directory: Frontend
      run: npm run preview

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Start backend application
      working-directory: ./LAB-TBD
      run: |
        ./mvnw clean package
        java -jar target/your-app.jar --spring.profiles.active=test &
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_MONGODB_URI: mongodb://localhost:27017/testdb

    - name: Wait for services to start
      run: |
        for i in {1..10}; do
          if curl -s http://localhost:8090/health && curl -s http://localhost:5173; then
            echo "Services are up!"
            exit 0
          fi
          echo "Waiting for services to start..."
          sleep 10
        done
        exit 1

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:5173'
        rules_file: '.zap/rules.tsv'
        format: 'html'
        fail_action: 'false'

    - name: Upload ZAP Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: zap-baseline-report
        path: owasp-zap-report.html
